{
  "swagger": "2.0",
  "info": {
    "description": "This is the API documentation for the HelpOnSport backend.",
    "version": "0.1",
    "title": "HelpOnSpot API"
  },
  "host": "js7pyl1b87.execute-api.eu-central-1.amazonaws.com",
  "basePath": "/dev",
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Organisation"
    },
    {
      "name": "Request"
    },
    {
      "name": "Qualifications"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/HoS_delete-organisation_dev": {
      "x-amazon-apigateway-any-method": {
        "responses": {
          "200": {
            "description": "200 response"
          }
        }
      }
    },
    "/geopoint": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "Contains the user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/ArrayOflocation"
            }
          },
          "500": {
            "description": "500 response"
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Returns all organisations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of organisations",
            "schema": {
              "$ref": "#/definitions/ArrayOforganisation"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting organisations"
          }
        }
      },
      "post": {
        "tags": [
          "Organisation"
        ],
        "summary": "Creates an organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "organisationData",
            "required": true,
            "schema": {
              "$ref": "#/definitions/organisationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created organisations",
            "schema": {
              "$ref": "#/definitions/organisation"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting organisations"
          }
        }
      }
    },
    "/organisations/{organisationId}": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Returns an organisation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation",
            "schema": {
              "$ref": "#/definitions/organisation"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting organisation"
          }
        }
      },
      "delete": {
        "tags": [
          "Organisation"
        ],
        "summary": "Deletes an organisation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation",
            "schema": {
              "$ref": "#/definitions/organisation"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting organisation"
          }
        }
      }
    },
    "/organisations/{organisationId}/requests": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Returns all request of an organisation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Requests",
            "schema": {
              "$ref": "#/definitions/ArrayOfrequest"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organisation"
        ],
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "requestData",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created organisations",
            "schema": {
              "$ref": "#/definitions/request"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "cognito-authorizer": []
          }
        ]
      },
      "options": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Headers": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/qualifications": {
      "get": {
        "tags": [
          "Qualifications"
        ],
        "summary": "Returns all qualifications",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Array of qualifications",
            "schema": {
              "$ref": "#/definitions/ArrayOfqualification"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Error while getting qualifications"
          }
        }
      }
    },
    "/requests/{requestId}": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Returns a request by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned request",
            "schema": {
              "$ref": "#/definitions/request"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting request"
          }
        }
      },
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Deletes a request by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted request",
            "schema": {
              "$ref": "#/definitions/request"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while deleting request"
          }
        }
      }
    },
    "/requests/{requestId}/invite": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Invite volunteers",
        "description": "Invite all matching volunteers to a request",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to invite to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "ArrayOfuser",
            "description": "Array of volunteers, which will be invited",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArrayOfuser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "invitation sent"
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while sending invitations"
          }
        }
      }
    },
    "/requests/{requestId}/volunteers": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Return all matched volunteers for one request",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned request",
            "schema": {
              "$ref": "#/definitions/ArrayOfresponseStatus"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting request"
          }
        }
      }
    },
    "/requests/{requestId}/volunteers/{userId}": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Add user response to a request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "response",
            "in": "path",
            "description": "User response",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated request",
            "schema": {
              "$ref": "#/definitions/request"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting request"
          }
        }
      },
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Remove participant from request",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned request",
            "schema": {
              "$ref": "#/definitions/request"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting request"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns all users",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "$ref": "#/definitions/ArrayOfuser"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting users"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a user",
        "description": "Creates a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "profileData",
            "description": "Contains the user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profileData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created user",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while creating a user"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns a user by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting a user from database"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user by id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion successful",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting a user from database"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "description": "Updates a User",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "profileData",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profileData"
            }
          }
        ],
        "responses": {}
      }
    },
    "/users/{userId}/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns a user's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user's profile to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting a user from database"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update a user's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user's profile to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "schema": {
              "$ref": "#/definitions/profile"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting a user from database"
          }
        }
      }
    },
    "/users/{userId}/requests": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns requests, which fit to a user (travelling distance and other filters)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestType",
            "in": "query",
            "description": "The request type",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius of search",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Custom location",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "schema": {
              "$ref": "#/definitions/ArrayOfrequest"
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid"
          },
          "500": {
            "description": "Error while getting a user from database"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "cognito-authorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "cognito_user_pools"
    }
  },
  "definitions": {
    "request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "organisation": {
          "$ref": "#/definitions/organisation"
        },
        "responses": {
          "type": "string"
        }
      }
    },
    "address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID"
        },
        "street": {
          "type": "string"
        },
        "houseNumber": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/location"
        }
      }
    },
    "ArrayOfresponseStatus": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/responseStatus"
      }
    },
    "profile": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName",
        "qualities"
      ],
      "properties": {
        "lastName": {
          "type": "string",
          "description": "Last name"
        },
        "firstName": {
          "type": "string",
          "description": "First name"
        },
        "email": {
          "type": "string",
          "description": "Email of user"
        },
        "isGPSLocationAllowed": {
          "type": "boolean",
          "description": "Boolean for GPS location"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "qualities": {
          "type": "array",
          "description": "Array of user qualities",
          "items": {
            "type": "string"
          }
        },
        "avatar": {
          "type": "string",
          "description": "URL to user avatar"
        }
      }
    },
    "organisation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID"
        },
        "name": {
          "type": "string",
          "description": "Organization name"
        },
        "logoPath": {
          "type": "string",
          "description": "Path to logo"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/request"
          }
        },
        "responsibles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/user"
          }
        }
      }
    },
    "responseStatus": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "reponseStatus": {
          "type": "string",
          "description": "User response to request",
          "enum": [
            "accepted",
            "pending",
            "declined"
          ]
        }
      }
    },
    "ArrayOfqualification": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/qualification"
      }
    },
    "qualification": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Translated name"
        }
      }
    },
    "ArrayOfrequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/request"
      }
    },
    "organisationData": {
      "type": "object",
      "required": [
        "address",
        "name",
        "responsibles"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Organization name"
        },
        "logoPath": {
          "type": "string",
          "description": "Path to logo"
        },
        "address": {
          "$ref": "#/definitions/addressData"
        },
        "responsibles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "location": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "string",
          "description": "Latitude"
        },
        "longitude": {
          "type": "string",
          "description": "Longitude"
        }
      }
    },
    "ArrayOforganisation": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/organisation"
      }
    },
    "profileData": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName",
        "qualifications"
      ],
      "properties": {
        "lastName": {
          "type": "string",
          "description": "Last name"
        },
        "firstName": {
          "type": "string",
          "description": "First name"
        },
        "email": {
          "type": "string",
          "description": "Email of user"
        },
        "isGPSLocationAllowed": {
          "type": "boolean",
          "description": "Boolean for GPS location"
        },
        "address": {
          "$ref": "#/definitions/addressData"
        },
        "qualifications": {
          "type": "array",
          "description": "Array of user qualities",
          "items": {
            "type": "string"
          }
        },
        "avatar": {
          "type": "string",
          "description": "URL to user avatar"
        }
      }
    },
    "requestData": {
      "type": "object",
      "required": [
        "address",
        "description",
        "endDate",
        "startDate",
        "title"
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "startDate": {
          "type": "string",
          "description": "Date as ISO 8601 string"
        },
        "endDate": {
          "type": "string",
          "description": "Date as ISO 8601 string"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "qualifications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ArrayOflocation": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/location"
      }
    },
    "ArrayOfuser": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID"
        },
        "lastName": {
          "type": "string",
          "description": "Last name"
        },
        "firstName": {
          "type": "string",
          "description": "First name"
        },
        "email": {
          "type": "string",
          "description": "Email of user"
        }
      }
    },
    "addressData": {
      "type": "object",
      "required": [
        "city",
        "country",
        "houseNumber",
        "postalCode",
        "street"
      ],
      "properties": {
        "street": {
          "type": "string"
        },
        "houseNumber": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Github",
    "url": "https://github.com/Helfer-Portal"
  }
}