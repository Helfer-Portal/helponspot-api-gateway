{
  "openapi": "3.0.1",
  "info": {
    "title": "HelpOnSpot API",
    "description": "This is the API documentation for the HelpOnSport backend.",
    "version": "0.1"
  },
  "externalDocs": {
    "description": "Github",
    "url": "https://github.com/Helfer-Portal"
  },
  "servers": [
    {
      "url": "https://js7pyl1b87.execute-api.eu-central-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "dev"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Organisation"
    },
    {
      "name": "Request"
    },
    {
      "name": "Qualifications"
    }
  ],
  "paths": {
    "/requests/{requestId}/invite": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Invite volunteers",
        "description": "Invite all matching volunteers to a request",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to invite to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Array of volunteers, which will be invited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArrayOfuser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "invitation sent",
            "content": {}
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while sending invitations",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns all users",
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfuser"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting users",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a user",
        "description": "Creates a user.",
        "requestBody": {
          "description": "Contains the user information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the newly created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while creating a user",
            "content": {}
          }
        }
      }
    },
    "/requests/{requestId}/volunteers/{userId}": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Add user response to a request",
        "parameters": [
          {
            "name": "response",
            "in": "path",
            "description": "User response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting request",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Remove participant from request",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting request",
            "content": {}
          }
        }
      }
    },
    "/requests/{requestId}": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Returns a request by id",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting request",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Deletes a request by id",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while deleting request",
            "content": {}
          }
        }
      }
    },
    "/users/{userId}/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns a user's profile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user's profile to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting a user from database",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update a user's profile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user's profile to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profile"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting a user from database",
            "content": {}
          }
        }
      }
    },
    "/geopoint": {
      "post": {
        "requestBody": {
          "description": "Contains the user information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOflocation"
                }
              }
            }
          },
          "500": {
            "description": "500 response",
            "content": {}
          }
        }
      }
    },
    "/requests": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Create a request",
        "responses": {
          "200": {
            "description": "Created request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfrequest"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while creating request",
            "content": {}
          }
        }
      }
    },
    "/qualifications": {
      "get": {
        "tags": [
          "Qualifications"
        ],
        "summary": "Returns all qualifications",
        "responses": {
          "200": {
            "description": "Array of qualifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfqualification"
                }
              }
            }
          },
          "500": {
            "description": "Error while getting qualifications",
            "content": {}
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Returns all organisations",
        "responses": {
          "200": {
            "description": "List of organisations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOforganisation"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting organisations",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Organisation"
        ],
        "summary": "Creates an organization",
        "responses": {
          "200": {
            "description": "Created organisations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting organisations",
            "content": {}
          }
        }
      }
    },
    "/users/{userId}/requests": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns requests, which fit to a user (travelling distance and other filters)",
        "parameters": [
          {
            "name": "requestType",
            "in": "query",
            "description": "The request type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius of search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Custom location",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfrequest"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting a user from database",
            "content": {}
          }
        }
      }
    },
    "/organisations/{organisationId}/requests": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Returns all request of an organisation",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfrequest"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Returns an organisation",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting organisation",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Organisation"
        ],
        "summary": "Deletes an organisation",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting organisation",
            "content": {}
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns a user by id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting a user from database",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a user by id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting a user from database",
            "content": {}
          }
        }
      }
    },
    "/requests/{requestId}/volunteers": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Return all matched volunteers for one request",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfresponseStatus"
                }
              }
            }
          },
          "400": {
            "description": "A required parameter is missing or invalid",
            "content": {}
          },
          "500": {
            "description": "Error while getting request",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID",
            "format": "int32"
          },
          "isActive": {
            "type": "integer",
            "format": "int32"
          },
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID",
            "format": "int32"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          }
        }
      },
      "ArrayOfresponseStatus": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/responseStatus"
        }
      },
      "profile": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "qualities"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "email": {
            "type": "string",
            "description": "Email of user"
          },
          "isGPSLocationAllowed": {
            "type": "boolean",
            "description": "Boolean for GPS location"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "qualities": {
            "type": "array",
            "description": "Array of user qualities",
            "items": {
              "type": "string"
            }
          },
          "avatar": {
            "type": "string",
            "description": "URL to user avatar"
          }
        }
      },
      "organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "logoPath": {
            "type": "string",
            "description": "Path to logo"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/request"
            }
          }
        }
      },
      "responseStatus": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "reponseStatus": {
            "type": "string",
            "description": "User response to request",
            "enum": [
              "accepted",
              "pending",
              "declined"
            ]
          }
        }
      },
      "ArrayOfqualification": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/qualification"
        }
      },
      "qualification": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Translated name"
          }
        }
      },
      "ArrayOfrequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/request"
        }
      },
      "location": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude"
          },
          "longitude": {
            "type": "string",
            "description": "Longitude"
          }
        }
      },
      "ArrayOforganisation": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/organisation"
        }
      },
      "ArrayOflocation": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/location"
        }
      },
      "ArrayOfuser": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/user"
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID",
            "format": "int32"
          },
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "email": {
            "type": "string",
            "description": "Email of user"
          }
        }
      }
    }
  }
}