openapi: "3.0.1"
info:
  title: "HelpOnSpot API"
  description: "This is the API documentation for the HelpOnSport backend."
  version: "0.1"
externalDocs:
  description: "Github"
  url: "https://github.com/Helfer-Portal"
servers:
  - url: "https://js7pyl1b87.execute-api.eu-central-1.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "dev"
tags:
  - name: "User"
  - name: "Organisation"
  - name: "Request"
  - name: "Qualifications"
paths:
  /requests/{requestId}/invite:
    post:
      tags:
        - "Request"
      summary: "Invite volunteers"
      description: "Invite all matching volunteers to a request"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to invite to"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Array of volunteers, which will be invited"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArrayOfuser"
        required: true
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while sending invitations"
          content: {}
        200:
          description: "invitation sent"
          content: {}
  /users:
    get:
      tags:
        - "User"
      summary: "Returns all users"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting users"
          content: {}
        200:
          description: "List of users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfuser"
    post:
      tags:
        - "User"
      summary: "Creates a user"
      description: "Creates a user."
      requestBody:
        description: "Contains the user information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profileData"
        required: true
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while creating a user"
          content: {}
        201:
          description: "Returns the newly created user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
  /requests/{requestId}/volunteers/{userId}:
    put:
      tags:
        - "Request"
      summary: "Add user response to a request"
      parameters:
        - name: "response"
          in: "path"
          description: "User response"
          required: true
          schema:
            type: "string"
        - name: "userId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Updated request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
    delete:
      tags:
        - "Request"
      summary: "Remove participant from request"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Returned request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
  /requests/{requestId}:
    get:
      tags:
        - "Request"
      summary: "Returns a request by id"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Returned request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
    delete:
      tags:
        - "Request"
      summary: "Deletes a request by id"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while deleting request"
          content: {}
        200:
          description: "Deleted request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
  /users/{userId}/profile:
    get:
      tags:
        - "User"
      summary: "Returns a user's profile"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user's profile to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
    patch:
      tags:
        - "User"
      summary: "Update a user's profile"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user's profile to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
  /geopoint:
    post:
      requestBody:
        description: "Contains the user information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/address"
        required: true
      responses:
        500:
          description: "500 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOflocation"
  /ping:
    get:
      security:
        - cognito-authorizer: []
    options: {}
  /qualifications:
    get:
      tags:
        - "Qualifications"
      summary: "Returns all qualifications"
      responses:
        500:
          description: "Error while getting qualifications"
          content: {}
        200:
          description: "Array of qualifications"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfqualification"
  /organisations:
    get:
      tags:
        - "Organisation"
      summary: "Returns all organisations"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisations"
          content: {}
        200:
          description: "List of organisations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOforganisation"
    post:
      tags:
        - "Organisation"
      summary: "Creates an organization"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/organisationData"
        required: true
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisations"
          content: {}
        200:
          description: "Created organisations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/organisation"
  /users/{userId}/requests:
    get:
      tags:
        - "User"
      summary: "Returns requests, which fit to a user (travelling distance and other\
        \ filters)"
      parameters:
        - name: "requestType"
          in: "query"
          description: "The request type"
          schema:
            type: "string"
        - name: "userId"
          in: "path"
          description: "ID of the user"
          required: true
          schema:
            type: "string"
        - name: "radius"
          in: "query"
          description: "Radius of search"
          schema:
            type: "string"
        - name: "location"
          in: "query"
          description: "Custom location"
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfrequest"
  /organisations/{organisationId}/requests:
    get:
      tags:
        - "Organisation"
      summary: "Returns all request of an organisation"
      parameters:
        - name: "organisationId"
          in: "path"
          description: "ID of the organisation"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Requests"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfrequest"
    post:
      parameters:
        - name: "organisationId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestData"
        required: true
      responses:
        200:
          description: "Created organisations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
  /organisations/{organisationId}:
    get:
      tags:
        - "Organisation"
      summary: "Returns an organisation"
      parameters:
        - name: "organisationId"
          in: "path"
          description: "ID of the organisation to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisation"
          content: {}
        200:
          description: "Organisation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/organisation"
    delete:
      tags:
        - "Organisation"
      summary: "Deletes an organisation"
      parameters:
        - name: "organisationId"
          in: "path"
          description: "ID of the organisation to delete"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisation"
          content: {}
        200:
          description: "Organisation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/organisation"
  /users/{userId}:
    get:
      tags:
        - "User"
      summary: "Returns a user by id"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
    delete:
      tags:
        - "User"
      summary: "Deletes a user by id"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Deletion successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /requests/{requestId}/volunteers:
    get:
      tags:
        - "Request"
      summary: "Return all matched volunteers for one request"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Returned request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfresponseStatus"
components:
  schemas:
    request:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        title:
          type: "string"
        description:
          type: "string"
        isActive:
          type: "boolean"
        startDate:
          type: "string"
        endDate:
          type: "string"
        address:
          $ref: "#/components/schemas/address"
        organisation:
          $ref: "#/components/schemas/organisation"
        responses:
          type: "string"
    address:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        street:
          type: "string"
        houseNumber:
          type: "string"
        postalCode:
          type: "string"
        city:
          type: "string"
        country:
          type: "string"
        location:
          $ref: "#/components/schemas/location"
    ArrayOfresponseStatus:
      type: "array"
      items:
        $ref: "#/components/schemas/responseStatus"
    profile:
      required:
        - "email"
        - "firstName"
        - "lastName"
        - "qualities"
      type: "object"
      properties:
        lastName:
          type: "string"
          description: "Last name"
        firstName:
          type: "string"
          description: "First name"
        email:
          type: "string"
          description: "Email of user"
        isGPSLocationAllowed:
          type: "boolean"
          description: "Boolean for GPS location"
        address:
          $ref: "#/components/schemas/address"
        qualities:
          type: "array"
          description: "Array of user qualities"
          items:
            type: "string"
        avatar:
          type: "string"
          description: "URL to user avatar"
    organisation:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        name:
          type: "string"
          description: "Organization name"
        logoPath:
          type: "string"
          description: "Path to logo"
        address:
          $ref: "#/components/schemas/address"
        requests:
          type: "array"
          items:
            $ref: "#/components/schemas/request"
        responsibles:
          type: "array"
          items:
            $ref: "#/components/schemas/user"
    responseStatus:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        reponseStatus:
          type: "string"
          description: "User response to request"
          enum:
            - "accepted"
            - "pending"
            - "declined"
    ArrayOfqualification:
      type: "array"
      items:
        $ref: "#/components/schemas/qualification"
    qualification:
      type: "object"
      properties:
        key:
          type: "string"
        name:
          type: "string"
          description: "Translated name"
    ArrayOfrequest:
      type: "array"
      items:
        $ref: "#/components/schemas/request"
    organisationData:
      required:
        - "address"
        - "name"
        - "responsibles"
      type: "object"
      properties:
        name:
          type: "string"
          description: "Organization name"
        logoPath:
          type: "string"
          description: "Path to logo"
        address:
          $ref: "#/components/schemas/addressData"
        responsibles:
          type: "array"
          items:
            type: "string"
    location:
      type: "object"
      properties:
        latitude:
          type: "string"
          description: "Latitude"
        longitude:
          type: "string"
          description: "Longitude"
    ArrayOforganisation:
      type: "array"
      items:
        $ref: "#/components/schemas/organisation"
    profileData:
      required:
        - "email"
        - "firstName"
        - "lastName"
        - "qualifications"
      type: "object"
      properties:
        lastName:
          type: "string"
          description: "Last name"
        firstName:
          type: "string"
          description: "First name"
        email:
          type: "string"
          description: "Email of user"
        isGPSLocationAllowed:
          type: "boolean"
          description: "Boolean for GPS location"
        address:
          $ref: "#/components/schemas/addressData"
        qualifications:
          type: "array"
          description: "Array of user qualities"
          items:
            type: "string"
        avatar:
          type: "string"
          description: "URL to user avatar"
    requestData:
      required:
        - "address"
        - "description"
        - "endDate"
        - "startDate"
        - "title"
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
        isActive:
          type: "boolean"
        startDate:
          type: "string"
          description: "Date as ISO 8601 string"
        endDate:
          type: "string"
          description: "Date as ISO 8601 string"
        address:
          $ref: "#/components/schemas/address"
        qualifications:
          type: "array"
          items:
            type: "string"
    ArrayOflocation:
      type: "array"
      items:
        $ref: "#/components/schemas/location"
    ArrayOfuser:
      type: "array"
      items:
        $ref: "#/components/schemas/user"
    user:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        lastName:
          type: "string"
          description: "Last name"
        firstName:
          type: "string"
          description: "First name"
        email:
          type: "string"
          description: "Email of user"
    addressData:
      required:
        - "city"
        - "country"
        - "houseNumber"
        - "postalCode"
        - "street"
      type: "object"
      properties:
        street:
          type: "string"
        houseNumber:
          type: "string"
        postalCode:
          type: "string"
        city:
          type: "string"
        country:
          type: "string"
  securitySchemes:
    cognito-authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
