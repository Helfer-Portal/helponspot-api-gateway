openapi: "3.0.1"
info:
  title: "HelpOnSpot API"
  description: "This is the API documentation for the HelpOnSport backend."
  version: "0.1"
externalDocs:
  description: "Github"
  url: "https://github.com/Helfer-Portal"
servers:
  - url: "https://q7trxhcc49.execute-api.eu-central-1.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "/test"
tags:
  - name: "User"
  - name: "Organisation"
  - name: "Request"
  - name: "Project"
paths:
  /users:
    get:
      tags:
        - "User"
      summary: "Returns all users"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting users"
          content: {}
        200:
          description: "List of users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfuser"
    post:
      tags:
        - "User"
      summary: "Creates a user"
      description: "Creates a user."
      requestBody:
        description: "Contains the user information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
        required: true
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while creating a user"
          content: {}
        201:
          description: "Returns the newly created user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /requests/{requestId}:
    get:
      tags:
        - "Request"
      summary: "Returns a request by id"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Returned request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
    delete:
      tags:
        - "Request"
      summary: "Deletes a request by id"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while deleting request"
          content: {}
        200:
          description: "Deleted request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
  /users/{id}:
    get:
      tags:
        - "User"
      summary: "Returns a user by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
    delete:
      tags:
        - "User"
      summary: "Deletes a user by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Deletion successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /requests/{requestId}/participants:
    get:
      tags:
        - "Request"
      summary: "Return participants for one request"
      parameters:
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Returned request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /organisations/{id}:
    get:
      tags:
        - "Organisation"
      summary: "Returns an organisation"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the organisation to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisation"
          content: {}
        200:
          description: "Organisation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/organisation"
    delete:
      tags:
        - "Organisation"
      summary: "Deletes an organisation"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the organisation to delete"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisation"
          content: {}
        200:
          description: "Organisation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/organisation"
  /users/{id}/profile:
    get:
      tags:
        - "User"
      summary: "Returns a user's profile"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user's profile to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
    put:
      tags:
        - "User"
      summary: "Update a user's profile"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user's profile to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting a user from database"
          content: {}
        200:
          description: "Get successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
  /requests:
    get:
      tags:
        - "Request"
      summary: "Returns all requests"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting requests"
          content: {}
        200:
          description: "List of requests"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfrequest"
    post:
      tags:
        - "Request"
      summary: "Create a request"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while creating request"
          content: {}
        200:
          description: "Created request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
  /requests/{requestId}/participants/{userId}:
    put:
      tags:
        - "Request"
      summary: "Add participant to request"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Updated request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
    delete:
      tags:
        - "Request"
      summary: "Remove participant from request"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
        - name: "requestId"
          in: "path"
          description: "ID of the request to get"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting request"
          content: {}
        200:
          description: "Returned request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
  /organisations:
    get:
      tags:
        - "Organisation"
      summary: "Returns all organisations"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisations"
          content: {}
        200:
          description: "List of organisations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOforganisation"
    post:
      tags:
        - "Organisation"
      summary: "Creates an organization"
      responses:
        400:
          description: "A required parameter is missing or invalid"
          content: {}
        500:
          description: "Error while getting organisations"
          content: {}
        200:
          description: "Created organisations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOforganisation"
components:
  schemas:
    request:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        isActive:
          type: "integer"
          format: "int32"
        start:
          type: "string"
        end:
          type: "string"
        address:
          $ref: "#/components/schemas/address"
        project:
          $ref: "#/components/schemas/project"
    address:
      type: "object"
      properties:
        street:
          type: "string"
        hn:
          type: "string"
        zip:
          type: "string"
        city:
          type: "string"
        country:
          type: "string"
    ArrayOfrequest:
      type: "array"
      items:
        $ref: "#/components/schemas/request"
    profile:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
    organisation:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        name:
          type: "string"
          description: "Organization name"
        logoPath:
          type: "string"
          description: "Path to logo"
        address:
          $ref: "#/components/schemas/address"
        projects:
          type: "array"
          items:
            $ref: "#/components/schemas/project"
    project:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        name:
          type: "string"
          description: "Description of project"
    ArrayOforganisation:
      type: "array"
      items:
        $ref: "#/components/schemas/organisation"
    ArrayOfuser:
      type: "array"
      items:
        $ref: "#/components/schemas/user"
    user:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "Unique ID"
          format: "int32"
        name:
          type: "string"
          description: "Last name"
        surname:
          type: "string"
          description: "First name"
        email:
          type: "string"
          description: "Email of user"
        create_time:
          type: "integer"
          description: "create timestamp"
          format: "int32"
